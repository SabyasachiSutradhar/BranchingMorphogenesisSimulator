/*
This header file written by Sabyasachi Sutradhar, Yale university (sabyasachi.Sutradhar@yale.edu) 2022
This code simulates branching morphogensis of Drosophila class-IV dendritic arbor. branches are generates from the origin (0,0)
and then the tips go through three state dynamics G-P-S with different rates and also new branches spawn from an existing branchesrandomly
with a rate.
This header file dumps different data.
Copyright @ Sabyasachi Sutradhar
*/
double measure_cosine(double x11,double y11,double x12,double y12,double x21,double y21,double x22,double y22){
double angle;
double x1,x2,y1,y2,dot,det;
x1=(x12-x11);x2=(x22-x21);
y1=(y12-y11);y2=(y22-y21);
dot = x1*x2 + y1*y2;      // dot product
det = x1*y2 - y1*x2;     // determinant
angle = atan2(det, dot);  // atan2(y, x) or atan2(sin, cos)
return angle;
}

///////////////////////////////////////////////////////////////////////////
///////////////////////// Print Image and configuratuin files//////////////
///////////////////////////////////////////////////////////////////////////
void print_configurations(int sample){
int kk=0,pp,ind1,ind2,indd;
int **ImData;
  ImData=imatrix(0,maxx-minx+2,0,maxy-miny+2);
  for(int j=1;j<=maxy-miny+1;j++){
    for (int i=1; i<=maxx-minx+1; i++){
      ImData[i][j]=0;
    }
  }
sprintf(fileconfim,"ConfIm-Sample-%d-TimeStep-%d.pgm",sample,tint);
fpconfim=fopen(fileconfim,"w");

sprintf(fileconf,"ConfRaw-Sample-%d-TimeStep-%d.swc",sample,tint);
fpconf=fopen(fileconf,"w");
////////////////////////swc file header /////////////////////////////
fprintf(fpconf,"#Skeleton generated by simulation\n");
fprintf(fpconf,"#Info=All lengths are in microns\n");
fprintf(fpconf,"#COLUMN_NAMES = ID, BranchID, x, y, z,radius,ParentID\n");
fprintf(fpconf,"%d %d %1.3f %1.3f %1.3f %1.3f %d\n",1,1,0.0,0.0,0.0,0.2,-1);
///////

  int k=1;
  for (int i=1; i<=n_tip; i++){
    if(Tiplength[i]>0.0){
    for(int j=1;j<=Tipl[i];j++){
      ImData[(int)ceil(Tipx[i][j]/pixelsize)-minx+1][(int)ceil(Tipy[i][j]/pixelsize)-miny+1]=255;////load pixels for image
      if(j>=2){
        k+=1;
        if(j==2){
          ind1=bottomneighbourindex[i][1];
          ind2=bottomneighbourindex[i][2];
          if(determine_downbranch(i,ind1)==1){indd=ind1;}
          else{indd=ind2;}
          pp=ParentID[indd][Tipl[indd]];
          fprintf(fpconf,"%d %d %1.3f %1.3f %1.3f %1.3f %d\n",k,i,Tipx[i][j],Tipy[i][j],0.0,0.0,pp+1);
        }else{
          fprintf(fpconf,"%d %d %1.3f %1.3f %1.3f %1.3f %d\n",k,i,Tipx[i][j],Tipy[i][j],0.0,Return_Radius(i),ParentID[i][j]);
        }
      }
    }
  }
}
fclose(fpconf);


  fprintf(fpconfim, "P2\n%d %d\n255\n",maxx-minx+1,maxy-miny+1);///image header
  for(int j=1;j<=maxy-miny+1;j++){
    for (int i=1; i<=maxx-minx+1; i++){
      fprintf(fpconfim,"%d ",ImData[i][j]);
    }
    fprintf(fpconfim,"\n");
  }
fclose(fpconfim);
free_imatrix(ImData,0,maxx-minx+2,0,maxy-miny+2);

}

///////////////////Print Some data //////////////////////////
void print_datafiles(){
fp1=fopen(file1,"a");
fprintf(fp1,"%d,%d,%d,%f\n",tint,n_tip,n_tipend,Total_Length);
fclose(fp1);
}
